https://github.com/vaishalitapaswi/valueM

Sender:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using RabbitMQ.Client;

namespace demo1Sender
{
    public partial class Form1 : Form
    {
        ConnectionFactory factory;
        IConnection connection;
        IModel model;
        

        public Form1()
        {
            InitializeComponent();
            factory = new ConnectionFactory() { HostName = "localhost" };
            connection = factory.CreateConnection();
            model = connection.CreateModel();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            label3.Text = "trying to send message";
            var myprop = model.CreateBasicProperties();
            myprop.Persistent = true;
           model.QueueDeclare(queue: textBox1.Text ,
                                 durable: true, /* messages will not survive broker restart  */
                                 exclusive: false,
                                 autoDelete: false,
                                 arguments: null);

            var body = Encoding.UTF8.GetBytes(textBox2.Text );

            model.BasicPublish(exchange: "",
                                 routingKey: textBox1.Text,
                                 basicProperties: myprop,
                                 body: body);
            label3.Text = "message sending succesful !!!";

        }
    }
}


consumer:


using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;
using System.Threading;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            var factory = new ConnectionFactory() { HostName = "localhost" };
            using (var connection = factory.CreateConnection())
            using (var channel = connection.CreateModel())
            {
                channel.QueueDeclare(queue: "Queue3",
                                     durable: true,
                                     exclusive: false,
                                     autoDelete: false,
                                     arguments: null);
                channel.BasicQos(0, 1, false);
                 var consumer = new EventingBasicConsumer(channel);
                consumer.Received += (model, ea) =>
                {
                    var body = ea.Body;
                    var message = Encoding.UTF8.GetString(body);
                    Thread.Sleep(message.Length * 1000);
                    Console.WriteLine(" [x] Received {0}", message);
                    channel.BasicAck(deliveryTag: ea.DeliveryTag, multiple:false);
                };
                channel.BasicConsume(queue: "Queue3",
                                     autoAck: false,
                                     consumer: consumer);

                Console.WriteLine(" Press [enter] to exit.");
                Console.ReadLine();
            }
        }
    }
}


Exchange Fanout Examples:;

     sender will sender the message to the entire consumers with same message

Sender::

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using RabbitMQ.Client;

namespace demo1Sender
{
    public partial class Form1 : Form
    {
        ConnectionFactory factory;
        IConnection connection;
        IModel model;
        

        public Form1()
        {
            InitializeComponent();
            factory = new ConnectionFactory() { HostName = "localhost" };
            connection = factory.CreateConnection();
            model = connection.CreateModel();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            model.ExchangeDeclare(exchange: "myexc", type: "fanout");
            label3.Text = "trying to send message";
           
           
            var body = Encoding.UTF8.GetBytes(textBox2.Text );

            model.BasicPublish(exchange: "myexc",
                                 routingKey: "",
                                 basicProperties: null,
                                 body: body);
            label3.Text = "message sending succesful !!!";

        }
    }
}


Consumer::

using System;
using RabbitMQ.Client;
using RabbitMQ.Client.Events;
using System;
using System.Text;
using System.Threading;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            var factory = new ConnectionFactory() { HostName = "localhost" };
            using (var connection = factory.CreateConnection())
            using (var channel = connection.CreateModel())
            {
                channel.ExchangeDeclare(exchange: "myexc", type: "fanout");
                var queueName = channel.QueueDeclare().QueueName;
                channel.QueueBind(queue: "", exchange: "myexc", routingKey: "");
                 var consumer = new EventingBasicConsumer(channel);
                consumer.Received += (model, ea) =>
                {
                    var body = ea.Body;
                    var message = Encoding.UTF8.GetString(body);
                    
                    Console.WriteLine(" [x] Received {0}", message);
                    
                };
                channel.BasicConsume(queue: "",
                                     autoAck: true,
                                     consumer: consumer);

                Console.WriteLine(" Press [enter] to exit.");
                Console.ReadLine();
            }
        }
    }
}


Useful commands:

Microsoft Windows [Version 10.0.14393]
(c) 2016 Microsoft Corporation. All rights reserved.

C:\Users\Administrator>rabbitmqctl
'rabbitmqctl' is not recognized as an internal or external command,
operable program or batch file.

C:\Users\Administrator>\

C:\Users\Administrator>set path=%path%;C:\Program Files\RabbitMQ Server\rabbitmq_server-3.7.8\sbin;

C:\Users\Administrator>rabbitmqctl

Usage:
rabbitmqctl [-n <node>] [-l] [-q] <command> [<command options>]

General options:
    -n node
    -q quiet
    -l longnames

Default node is "rabbit@server", where `server` is the local hostname. On a host
named "server.example.com", the node name of the RabbitMQ Erlang node will
usually be rabbit@server (unless RABBITMQ_NODENAME has been set to some
non-default value at broker startup time). The output of hostname -s is usually
the correct suffix to use after the "@" sign. See rabbitmq-server(1) for
details of configuring the RabbitMQ broker.

Quiet output mode is selected with the "-q" flag. Informational messages are
suppressed when quiet mode is in effect.

If RabbitMQ broker uses long node names for erlang distribution, "longnames"
option should be specified.

Some commands accept an optional virtual host parameter for which
to display results. The default value is "/".

Commands:
    add_user <username> <password>
    add_vhost <vhost>
    authenticate_user <username> <password>
    await_online_nodes <count> [-t <timeout>]
    cancel_sync_queue [-p <vhost>] queue
    change_cluster_node_type <disc|ram>
    change_password <username> <password>
    clear_global_parameter <key>
    clear_operator_policy [-p <vhost>] <key>
    clear_parameter [-p <vhost>] <component_name> <key>
    clear_password <username>
    clear_permissions [-p vhost] <username>
    clear_policy [-p <vhost>] <key>
    clear_topic_permissions [-p vhost] <username> [<exchange>]
    clear_vhost_limits [-p <vhost>]
    close_all_connections [-p <vhost> --limit <limit>] [-n <node> --global] [--per-connection-delay <delay>] <explanation>
    close_connection <connectionpid> <explanation>
    cluster_status
    decode value passphrase [--cipher cipher] [--hash hash] [--iterations iterations]
    delete_queue queue_name [--if_empty|-e] [--if_unused|-u] [-t <timeout>]
    delete_user <username>
    delete_vhost <vhost>
    encode value passphrase [--cipher cipher] [--hash hash] [--iterations iterations]
    environment
    eval <expr>
    exec <expr> [--offline]
    force_boot
    force_reset
    forget_cluster_node [--offline] <existing_cluster_member_node>
    help <command>
    hipe_compile <directory>
    join_cluster [--disc|--ram] <existing_cluster_member_node>
    list_bindings [-p <vhost>] [<bindinginfoitem> ...] [-t <timeout>]
    list_channels [<channelinfoitem> ...]
    list_ciphers
    list_connections [<connectioninfoitem> ...] [-t <timeout>]
    list_consumers [-p vhost] [<consumerinfoitem> ...] [-t <timeout>]
    list_exchanges [-p <vhost>] [<exchangeinfoitem> ...] [-t <timeout>]
    list_global_parameters [-t <timeout>]
    list_hashes
    list_operator_policies [-p <vhost>] [-t <timeout>]
    list_parameters [-p <vhost>] [-t <timeout>]
    list_permissions [-p <vhost>] [-t <timeout>]
    list_policies [-p <vhost>] [-t <timeout>]
    list_queues [-p <vhost>] [--online] [--offline] [--local] [<queueinfoitem> ...] [-t <timeout>]
    list_topic_permissions [-p <vhost>] [-t <timeout>]
    list_unresponsive_queues [--local] [--queue-timeout <queue-timeout>] [<unresponsiveq_ueueinfoitem> ...] [-t <timeout>]
    list_user_permissions <username> [-t <timeout>]
    list_user_topic_permissions <username> [-t <timeout>]
    list_users [-t <timeout>]
    list_vhost_limits [-p <vhost>] [--global]
    list_vhosts [<vhostinfoitem> ...] [-t <timeout>]
    node_health_check [-t <timeout>]
    ping [-t <timeout>]
    purge_queue <queue> [-t <timeout>]
    rename_cluster_node <oldnode1> <newnode1> [oldnode2] [newnode2] ...
    report
    reset
    restart_vhost [-p <vhost>] [-t <timeout>]
    rotate_logs
    set_cluster_name <name>
    set_disk_free_limit <disk_limit>
set_disk_free_limit mem_relative <fraction>
    set_global_parameter <name> <value>
    set_operator_policy [-p <vhost>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>
    set_parameter [-p <vhost>] <component_name> <name> <value>
    set_permissions [-p <vhost>] <username> <conf> <write> <read>
    set_policy [-p <vhost>] [--priority <priority>] [--apply-to <apply-to>] <name> <pattern> <definition>
    set_topic_permissions [-p <vhost>] <username> <exchange> <write_pattern> <read_pattern>
    set_user_tags <username> <tag> [...]
    set_vhost_limits [-p <vhost>] <definition>
    set_vm_memory_high_watermark <fraction>
    set_vm_memory_high_watermark absolute <value>
    shutdown
    start_app
    status
    stop [<pidfile>]
    stop_app
    sync_queue [-p <vhost>] queue
    trace_off [-p <vhost>]
    trace_on [-p <vhost>]
    update_cluster_nodes <existing_cluster_member_node_to_seed_from>
    wait [<pid_file>] [--pid|-P <pid>] [-t <timeout>]

<timeout> - operation timeout in seconds. Default is "infinity".

<queueinfoitem> must be a member of the list [name, durable, auto_delete, arguments, policy, pid, owner_pid, exclusive, exclusive_consumer_pid, exclusive_consumer_tag, messages_ready, messages_unacknowledged, messages, messages_ready_ram, messages_unacknowledged_ram, messages_ram, messages_persistent, message_bytes, message_bytes_ready, message_bytes_unacknowledged, message_bytes_ram, message_bytes_persistent, head_message_timestamp, disk_reads, disk_writes, consumers, consumer_utilisation, memory, slave_pids, synchronised_slave_pids, state].

<bindinginfoitem> must be a member of the list [source_name, source_kind, destination_name, destination_kind, routing_key, arguments].

<connectioninfoitem> must be a member of the list [pid, name, port, host, peer_port, peer_host, ssl, ssl_protocol, ssl_key_exchange, ssl_cipher, ssl_hash, peer_cert_subject, peer_cert_issuer, peer_cert_validity, state, channels, protocol, auth_mechanism, user, vhost, timeout, frame_max, channel_max, client_properties, recv_oct, recv_cnt, send_oct, send_cnt, send_pend, connected_at].

<channelinfoitem> must be a member of the list [pid, connection, name, number, user, vhost, transactional, confirm, consumer_count, messages_unacknowledged, messages_uncommitted, acks_uncommitted, messages_unconfirmed, prefetch_count, global_prefetch_count].

<exchangeinfoitem> must be a member of the list [name, type, durable, auto_delete, internal, arguments, policy].

<vhostinfoitem> must be a member of the list [name, tracing, cluster_state].

<consumerinfoitem> must be a member of the list [queue_name, channel_pid, consumer_tag, ack_required, prefetch_count, arguments].

<unresponsive_queueinfoitem> must be a member of the list [name, durable, auto_delete, arguments, pid, recoverable_slaves].

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
demo1   1

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
demo2   2
demo1   1

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
demo2   2
demo1   0

C:\Users\Administrator>rabbitmqctl delete_queue demo1
Deleting queue 'demo1' on vhost '/' ...
Queue was successfully deleted with 0 messages

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
demo2   2

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  1
demo2   2
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  5
demo2   2
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  5
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  3
demo1   0

C:\Users\Administrator>rabbitmqctl list_queues name messages_ready messages_unacknowledged
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  0       0
demo1   0       0

C:\Users\Administrator>rabbitmqctl list_queues name messages_ready messages_unacknowledged
Timeout: 60.0 seconds ...
Listing queues for vhost / ...
Queue3  4       0
demo1   0       0

C:\Users\Administrator>rabbitmqctl list_exchange

Command 'list_exchange' not found.
Did you mean 'list_exchanges'?


C:\Users\Administrator>rabbitmqctl list_exchanges
Listing exchanges for vhost / ...
        direct
amq.fanout      fanout
amq.match       headers
amq.direct      direct
amq.topic       topic
amq.rabbitmq.trace      topic
amq.headers     headers

C:\Users\Administrator>rabbitmqctl list_exchanges
Listing exchanges for vhost / ...
        direct
amq.fanout      fanout
amq.match       headers
amq.direct      direct
amq.topic       topic
amq.rabbitmq.trace      topic
amq.headers     headers

C:\Users\Administrator>